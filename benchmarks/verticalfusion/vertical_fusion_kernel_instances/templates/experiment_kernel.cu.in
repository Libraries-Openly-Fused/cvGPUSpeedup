/* Copyright 2023-2025 Oscar Amoros Huguet
   Copyright 2025 Albert Andaluz Gonz√°lez
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

// templates/experiment_kernel.cu.in
#include "kernel@N@.h" // Corrected include for the paired generated header

#include <benchmarks/verticalfusion/vertical_fusion_static_loop.cuh>

#include <opencv2/core/cuda.hpp> // For cv::cuda::GpuMat, cv::cuda::Stream, cv::Size
#include <opencv2/core/hal/interface.h> // For CV_8UC1, CV_32FC1 (or other appropriate OpenCV header)
#include <array>     // For std::array
#include <cstdio>    // For printf, if used

void launch@N@(const std::array<cv::cuda::GpuMat, REAL_BATCH>& crops,
               const cv::cuda::Stream& cv_stream,
               const float& alpha,
               const cv::cuda::GpuMat& d_tensor_output,
               const cv::Size& cropSize,
               const FuncType& dFunc) {
    constexpr size_t EXPERIMENT_NUMBER = @N@; // CMake substitutes @N@
    // NUM_OPS calculation is 1-based for EXPERIMENT_NUMBER
    constexpr size_t NUM_OPS = FIRST_VALUE + (INCREMENT * (EXPERIMENT_NUMBER - 1));

    VerticalFusion<CV_8UC1, CV_32FC1, 2, NUM_OPS, FuncType>::execute(crops, cv_stream, alpha, d_tensor_output, cropSize, dFunc);
}