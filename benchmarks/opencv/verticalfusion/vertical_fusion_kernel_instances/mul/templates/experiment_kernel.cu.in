/* Copyright 2023-2025 Oscar Amoros Huguet
   Copyright 2025 Albert Andaluz Gonz√°lez
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

// templates/experiment_kernel.cu.in
#include "mul@N@.h" // Corrected include for the paired generated header

#include <benchmarks/opencv/verticalfusion/vertical_fusion_static_loop.cuh>
#include <benchmarks/opencv/verticalfusion/vertical_fusion_kernel_instances/mul/mulOpType.cuh>
#include <benchmarks/opencv/verticalfusion/vertical_fusion_kernel_instances/mul/realBatch.h>

#include <opencv2/core/cuda.hpp> // For cv::cuda::GpuMat, cv::cuda::Stream, cv::Size
#include <opencv2/core/hal/interface.h> // For CV_8UC1, CV_32FC1 (or other appropriate OpenCV header)
#include <array>     // For std::array
#include <cstdio>    // For printf, if used

// Definitions for CV_8UC1, CV_32FC1 if not from headers (e.g. could be from imgproc types)
// Ensure VerticalFusion template is declared/defined (presumably in vertical_fusion_static_loop.cuh)

void launchMul@N@(const std::array<cv::cuda::GpuMat, REAL_BATCH>& crops,
                  const cv::cuda::Stream& cv_stream,
                  const float& alpha,
                  const cv::cuda::GpuMat& d_tensor_output,
                  const cv::Size& cropSize,
                  const MulFuncType& dFunc) {
    constexpr size_t EXPERIMENT_NUMBER = @N@; // CMake substitutes @N@
    constexpr size_t FIRST_VALUE = 2;
    constexpr size_t INCREMENT = 100;
    // VALUE calculation is 1-based for EXPERIMENT_NUMBER
    constexpr size_t VALUE = FIRST_VALUE + (INCREMENT * (EXPERIMENT_NUMBER - 1));

    // Optional: Print to verify which instance is called
    // printf("Host: Launching mul%zu (Experiment %zu), VALUE = %zu\n", (size_t)@N@, EXPERIMENT_NUMBER, VALUE);

    VerticalFusion<CV_8UC1, CV_32FC1, 2, VALUE, MulFuncType>::execute(crops, cv_stream, alpha, d_tensor_output, cropSize, dFunc);
}